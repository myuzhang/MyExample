// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Add two numbers.
        /// </summary>
        public void AddMethod()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculatorWindow.UIItemWindow.UIItem1Button;
            WinButton uIAddButton = this.UICalculatorWindow.UIItemWindow1.UIAddButton;
            WinButton uIItem9Button = this.UICalculatorWindow.UIItemWindow2.UIItem9Button;
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow3.UIEqualsButton;
            #endregion

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(19, 12));

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(19, 12));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(12, 9));

            // Click '9' button
            Mouse.Click(uIItem9Button, new Point(14, 16));

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(12, 43));
        }
        
        /// <summary>
        /// Times
        /// </summary>
        public void Times()
        {
            #region Variable Declarations
            WinButton uIItem5Button = this.UICalculatorWindow.UIItemWindow4.UIItem5Button;
            WinButton uIMultiplyButton = this.UICalculatorWindow.UIItemWindow11.UIMultiplyButton;
            WinButton uIItem6Button = this.UICalculatorWindow.UIItemWindow21.UIItem6Button;
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow3.UIEqualsButton;
            #endregion

            // Click '5' button
            Mouse.Click(uIItem5Button, new Point(16, 17));

            // Click 'Multiply' button
            Mouse.Click(uIMultiplyButton, new Point(22, 10));

            // Click '6' button
            Mouse.Click(uIItem6Button, new Point(18, 19));

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(23, 33));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIItem30Text = this.UICalculatorWindow.UIItem30Window.UIItem30Text;
            #endregion

            // Verify that the 'ControlType' property of '30' label equals 'Text'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItem30TextControlType, uIItem30Text.ControlType.ToString(), "Not");

            // Verify that the 'DisplayText' property of '30' label equals '30'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItem30TextDisplayText, uIItem30Text.DisplayText, "not 30");
        }
        
        /// <summary>
        /// RecordedButtons
        /// </summary>
        public void RecordedButtons()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculatorWindow.UIItemWindow.UIItem1Button;
            WinButton uIMultiplyButton = this.UICalculatorWindow.UIItemWindow11.UIMultiplyButton;
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow3.UIEqualsButton;
            #endregion

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(13, 18));

            // Click 'Multiply' button
            Mouse.Click(uIMultiplyButton, new Point(21, 14));

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(22, 15));

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(15, 39));
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UICalculatorWindow mUICalculatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of '30' label equals 'Text'
        /// </summary>
        public string UIItem30TextControlType = "Text";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '30' label equals '30'
        /// </summary>
        public string UIItem30TextDisplayText = "30";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICalculatorWindow : WinWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CalcFrame";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow11 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow21 UIItemWindow21
        {
            get
            {
                if ((this.mUIItemWindow21 == null))
                {
                    this.mUIItemWindow21 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow21;
            }
        }
        
        public UIItem30Window UIItem30Window
        {
            get
            {
                if ((this.mUIItem30Window == null))
                {
                    this.mUIItem30Window = new UIItem30Window(this);
                }
                return this.mUIItem30Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow11 mUIItemWindow11;
        
        private UIItemWindow21 mUIItemWindow21;
        
        private UIItem30Window mUIItem30Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "131";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem1Button
        {
            get
            {
                if ((this.mUIItem1Button == null))
                {
                    this.mUIItem1Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem1Button.SearchProperties[WinButton.PropertyNames.Name] = "1";
                    this.mUIItem1Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem1Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "93";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "139";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem9Button
        {
            get
            {
                if ((this.mUIItem9Button == null))
                {
                    this.mUIItem9Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem9Button.SearchProperties[WinButton.PropertyNames.Name] = "9";
                    this.mUIItem9Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem9Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem9Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "121";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIEqualsButton
        {
            get
            {
                if ((this.mUIEqualsButton == null))
                {
                    this.mUIEqualsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEqualsButton.SearchProperties[WinButton.PropertyNames.Name] = "Equals";
                    this.mUIEqualsButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIEqualsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEqualsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "135";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem5Button
        {
            get
            {
                if ((this.mUIItem5Button == null))
                {
                    this.mUIItem5Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem5Button.SearchProperties[WinButton.PropertyNames.Name] = "5";
                    this.mUIItem5Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem5Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem5Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "92";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIMultiplyButton
        {
            get
            {
                if ((this.mUIMultiplyButton == null))
                {
                    this.mUIMultiplyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMultiplyButton.SearchProperties[WinButton.PropertyNames.Name] = "Multiply";
                    this.mUIMultiplyButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIMultiplyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMultiplyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "136";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem6Button.SearchProperties[WinButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem6Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItem30Window : WinWindow
    {
        
        public UIItem30Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "150";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinText UIItem30Text
        {
            get
            {
                if ((this.mUIItem30Text == null))
                {
                    this.mUIItem30Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem30Text.SearchProperties[WinText.PropertyNames.Name] = "Result";
                    this.mUIItem30Text.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem30Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem30Text;
        #endregion
    }
}
